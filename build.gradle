plugins {
    id "com.github.ben-manes.versions" version "0.20.0"
    id "com.github.kt3k.coveralls" version "2.8.2"
}

apply plugin: "com.github.kt3k.coveralls"
apply plugin: "jacoco"

task testReport(type: TestReport, group: "Build") {
    description "Generates an aggregate test report."
    destinationDir file("${buildDir}/reports/allTests")
}

subprojects {

    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "maven-publish"
    apply plugin: "maven"
    apply plugin: "signing"
    apply plugin: "com.github.ben-manes.versions"
    apply plugin: "com.github.kt3k.coveralls"
    apply plugin: "jacoco"
    apply plugin: "checkstyle"

    group = "com.github.elopteryx"
    version = "3.0.0-SNAPSHOT"

    repositories {
        mavenCentral()
        mavenLocal()
    }

    ext {
        servletApiVersion = "3.1.0"
        jaxrsApiVersion = "2.0.1"
        junitVersion = '5.3.1'
        apacheHttpVersion = "4.5.6"
        undertowVersion = "2.0.13.Final"
        jettyVersion = "9.4.11.v20180605"
        tomcatVersion = "9.0.12"
        resteasyVersion = "3.6.1.Final"
        tikaVersion = "1.18"
        jimfsVersion = "1.1"
        mockitoVersion = "2.22.0"
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = 11
        targetCompatibility = 11
    }

    task javadocJar(type: Jar) {
        classifier "javadoc"
        from javadoc
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                windowTitle "Upload Parser API Documentation"
                docTitle "Upload Parser API Documentation"
                bottom 'Copyright &#169; 2018 <a href="https://github.com/Elopteryx">Creative Elopteryx</a>'
                breakIterator true
                author false
                source "11"
                encoding "UTF-8"
                docEncoding "UTF-8"
                failOnError true
                links = [
                        "https://docs.oracle.com/javase/10/docs/api/",
                        "https://docs.oracle.com/javaee/7/api/",
                ]
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    checkstyle {
        toolVersion "8.11"
        configFile = new File("${projectDir}/../config/checkstyle/checkstyle.xml")
    }

    jacoco {
        toolVersion = "0.8.2"
    }

    signing {
        required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
    }

    tasks.withType(Test) {
        rootProject.testReport.reportOn it
        jacoco {
            append true
            destinationFile file("${rootDir}/build/jacoco/jacocoTest.exec")
            setClassDumpDir file("${rootDir}/build/jacoco/classpathdumps")
        }
    }
}

repositories {
    jcenter()
}

task jacocoRootReport(type: JacocoReport, group: "Coverage reports") {
    description "Generates an aggregate report from all subprojects"
    dependsOn(subprojects.test)

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group "Coverage reports"
    description "Uploads the aggregated coverage report to Coveralls."

    dependsOn jacocoRootReport
    onlyIf { System.env."CI" }
}