plugins {
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'com.github.spotbugs' version '6.0.15'
}

allprojects {
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = '0.8.12'
    }
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'

    group = 'com.github.elopteryx'
    version = '4.1.0-SNAPSHOT'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    ext {
        servletApiVersion = '6.0.0'
        undertowVersion = '2.3.13.Final'
        jettyVersion = '11.0.21'
        tomcatVersion = '10.1.24'
        junitVersion = '5.10.2'
        tikaVersion = '2.9.2'
        jimfsVersion = '1.3.0'
        mockitoVersion = '5.12.0'

        checkStyleVersion = '10.17.0'
        pmdVersion = '6.55.0'
        spotbugsVersion = '4.8.5'
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = 17
        targetCompatibility = 17
    }

    java {
        withJavadocJar()
        withSourcesJar()
        modularity.inferModulePath = true
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                windowTitle = 'Upload Parser API Documentation'
                docTitle = 'Upload Parser API Documentation'
                bottom = 'Copyright &#169; 2021 <a href="https://github.com/Elopteryx">Creative Elopteryx</a>'
                breakIterator = true
                author = false
                source = '17'
                encoding = 'UTF-8'
                docEncoding = 'UTF-8'
                failOnError = true
                links = [
                        'https://docs.oracle.com/en/java/javase/17/docs/api/',
                        'https://jakarta.ee/specifications/platform/9/apidocs/'
                ]
                modulePath = configurations.compileClasspath.asList()
            }
        }
    }

    checkstyle {
        toolVersion = checkStyleVersion
        configFile = file("${projectDir}/../config/checkstyle/checkstyle.xml")
    }

    pmd {
        toolVersion = pmdVersion
        incrementalAnalysis = true
        ruleSets = []
        ruleSetConfig = resources.text.fromFile(file("${rootDir}/config/pmd/rulesSets.xml"))
    }

    spotbugs {
        toolVersion = spotbugsVersion
        effort = com.github.spotbugs.snom.Effort.valueOf('MAX')
        excludeFilter = file("${projectDir}/../config/spotbugs/spotbugs-exclude.xml")
    }

    spotbugsTest {
        enabled = false
    }

    signing {
        required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('publish') }
        sign configurations.archives
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
    }

}

repositories {
    mavenCentral()
}
