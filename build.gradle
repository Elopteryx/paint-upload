plugins {
    id "com.github.ben-manes.versions" version "0.8"
    id "com.github.kt3k.coveralls" version "2.3.1"
}

subprojects {

    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "maven-publish"
    apply plugin: "maven"
    apply plugin: "signing"
    apply plugin: "com.github.ben-manes.versions"
    apply plugin: "com.github.kt3k.coveralls"
    apply plugin: "jacoco"

    configurations {
        provided
        provided.extendsFrom(compile)
    }

    version = "2.0.0-SNAPSHOT"

    repositories {
        mavenCentral()
        mavenLocal()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    task javadocJar(type: Jar) {
        classifier = "javadoc"
        from javadoc
    }

    javadoc {
        afterEvaluate {
            classpath += configurations.provided
            configure(options) {
                windowTitle "Paint Upload API Documentation"
                docTitle "Paint Upload API Documentation"
                bottom = 'Copyright &#169; 2015 <a href="https://github.com/Elopteryx">Creative Elopteryx</a>'
                breakIterator = true
                author = false
                source = "1.8"
                encoding = "UTF-8"
                docEncoding = "UTF-8"
                failOnError = true
                links = [ "http://jsr-305.googlecode.com/svn/trunk/javadoc",
                          "http://download.oracle.com/javase/8/docs/api/",
                          "http://download.oracle.com/javaee/7/api/",
                ]
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

//    signing {
//        sign configurations.archives
//    }

    sourceSets {
        main {
            compileClasspath += configurations.provided
        }
        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
    }

    idea {
        module {
            scopes.PROVIDED.plus += [configurations.provided]
        }
    }

    task testReport(type: TestReport, group: 'Build') {
        description = 'Generates an aggregate test report'
        destinationDir = file("${buildDir}/reports/allTests")
    }

    tasks.withType(Test) {
        testReport.reportOn it
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    def publishedProjects = subprojects

    task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
        description = 'Generates an aggregate report from all subprojects'
        dependsOn(publishedProjects.test)

        additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
        classDirectories = files(publishedProjects.sourceSets.main.output)
        executionData = files(publishedProjects.jacocoTestReport.executionData)

        reports {
            html.enabled = true
            xml.enabled = true
        }

        doFirst {
            executionData = files(executionData.findAll { it.exists() })
        }
    }

    coveralls {
        sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    }

    tasks.coveralls {
        group = 'Coverage reports'
        description = 'Uploads the aggregated coverage report to Coveralls'

        dependsOn jacocoRootReport
        onlyIf { System.env.'CI' }
    }
}