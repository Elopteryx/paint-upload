plugins {
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.github.spotbugs' version '1.6.4'
}

apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

task testReport(type: TestReport, group: 'Build') {
    description 'Generates an aggregate test report.'
    destinationDir file("${buildDir}/reports/allTests")
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'

    group = 'com.github.elopteryx'
    version = '3.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    ext {
        servletApiVersion = '3.1.0'
        jaxrsApiVersion = '2.0.1'
        junitVersion = '5.3.1'
        undertowVersion = '2.0.13.Final'
        jettyVersion = '9.4.11.v20180605'
        tomcatVersion = '9.0.12'
        resteasyVersion = '3.6.1.Final'
        tikaVersion = '1.19'
        jimfsVersion = '1.1'
        mockitoVersion = '2.22.0'

        checkStyleVersion = '8.11'
        pmdVersion = '6.7.0'
        spotbugsVersion = '3.1.7'
        jacocoVersion = '0.8.2'
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = 11
        targetCompatibility = 11
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from javadoc
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                windowTitle 'Upload Parser API Documentation'
                docTitle 'Upload Parser API Documentation'
                bottom "Copyright &#169; 2018 <a href='https://github.com/Elopteryx'>Creative Elopteryx</a>"
                breakIterator true
                author false
                source '11'
                encoding 'UTF-8'
                docEncoding 'UTF-8'
                failOnError true
                links = [
                        'https://docs.oracle.com/en/java/javase/11/docs/api/',
                        'https://docs.oracle.com/javaee/7/api/',
                ]
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    checkstyle {
        toolVersion = checkStyleVersion
        configFile = new File("${projectDir}/../config/checkstyle/checkstyle.xml")
    }

    pmd {
        toolVersion = pmdVersion
        ruleSets = []
        ruleSetConfig = resources.text.fromFile(file("${rootDir}/config/pmd/rulesSets.xml"))
    }

    spotbugs {
        toolVersion = spotbugsVersion
        effort = 'max'
        sourceSets = [sourceSets.main]
    }

    jacoco {
        toolVersion = jacocoVersion
    }

    jacocoTestReport {
        group = 'Coverage reports'
        description = 'Generates a test coverage report for a project'

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    task jacocoMerge(type: JacocoMerge) {
        executionData tasks.withType(Test)

        doFirst {
            executionData = files(executionData.findAll { it.exists() })
        }
    }

    signing {
        required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
    }

    tasks.withType(Test) {
        rootProject.testReport.reportOn it
        it.dependsOn('jar')

        // ensure tasks don't overwrite the default report directories used by the 'test' task
        reports.html.destination = file("${buildDir}/reports/${name}")
        reports.junitXml.destination = file("${buildDir}/reports/${name}/results")
        binResultsDir = file("${buildDir}/reports/${name}/results/binary/${name}")
    }
}

repositories {
    jcenter()
}

task jacocoMerge(type: JacocoMerge) {
    subprojects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description 'Generates an aggregate report from all subprojects'
    dependsOn subprojects.test, jacocoMerge

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs += subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group 'Coverage reports'
    description 'Uploads the aggregated coverage report to Coveralls.'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' }
}