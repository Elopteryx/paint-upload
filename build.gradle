plugins {
    id "com.github.ben-manes.versions" version "0.11.3"
    id "com.github.kt3k.coveralls" version "2.4.0"
}

apply plugin: "com.github.kt3k.coveralls"
apply plugin: "jacoco"

task testReport(type: TestReport, group: "Build") {
    description "Generates an aggregate test report."
    destinationDir file("${buildDir}/reports/allTests")
}

subprojects {

    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "maven-publish"
    apply plugin: "maven"
    apply plugin: "signing"
    apply plugin: "com.github.ben-manes.versions"
    apply plugin: "com.github.kt3k.coveralls"
    apply plugin: "jacoco"
    apply plugin: "checkstyle"

    configurations {
        provided
        provided.extendsFrom(compile)
    }

    version = "2.0.1-SNAPSHOT"

    repositories {
        mavenCentral()
        mavenLocal()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    task javadocJar(type: Jar) {
        classifier "javadoc"
        from javadoc
    }

    javadoc {
        afterEvaluate {
            classpath += configurations.provided
            configure(options) {
                windowTitle "Upload Parser API Documentation"
                docTitle "Upload Parser API Documentation"
                bottom 'Copyright &#169; 2015 <a href="https://github.com/Elopteryx">Creative Elopteryx</a>'
                breakIterator true
                author false
                source "1.8"
                encoding "UTF-8"
                docEncoding "UTF-8"
                failOnError true
                links = [ "http://jsr-305.googlecode.com/svn/trunk/javadoc",
                          "http://download.oracle.com/javase/8/docs/api/",
                          "http://download.oracle.com/javaee/7/api/",
                ]
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    checkstyle {
        toolVersion = "6.12.1"
        configFile = new File("${projectDir}/../config/checkstyle/checkstyle.xml")
    }

    signing {
        required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    sourceSets {
        main {
            compileClasspath += configurations.provided
        }
        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
    }

    idea {
        module {
            scopes.PROVIDED.plus += [configurations.provided]
        }
    }

    eclipse {
        classpath {
            plusConfigurations += [configurations.provided]
        }
    }

    tasks.withType(Test) {
        rootProject.testReport.reportOn it
        jacoco {
            append true
            destinationFile file("${rootDir}/build/jacoco/jacocoTest.exec")
            classDumpFile file("${rootDir}/build/jacoco/classpathdumps")
        }
    }
}

repositories {
    jcenter()
}

task jacocoRootReport(type: JacocoReport, group: "Coverage reports") {
    description "Generates an aggregate report from all subprojects"
    dependsOn(subprojects.test)

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled true
        xml.enabled true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group "Coverage reports"
    description "Uploads the aggregated coverage report to Coveralls."

    dependsOn jacocoRootReport
    onlyIf { System.env."CI" }
}